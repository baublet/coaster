// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`interfaces/types spits out interfaces 1`] = `
"function objectHasProperties(obj: Record<string, any>, properties: string[]): boolean {
  for(const property of properties) {
    if(!obj.hasOwnProperty(property)) {
      return false;
    }
  }
  return true;
}
interface RawUser {
id: unknown;
/** Users don't have to provide their name */
name?: string;
data: JSON;
};
function assertIsRawUserLike(subject: any): asserts subject is RawUser {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"data\\"])) { return; }
  }
  throw new Error(\\"Invariance violation! Expected subject to be a RawUser, but it was instead: \\" + JSON.stringify(subject));
}
function isRawUserLike(subject: any): subject is RawUser {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"data\\"])) { return true; }
  }
  return false;
}

/** Singular users can have multiple accounts */
interface RawUserAccount {
id: unknown;
/** Who sent us this users' data? */
source: string;
/** The raw data sent from the source provider */
source_data: JSON;
};
function assertIsRawUserAccountLike(subject: any): asserts subject is RawUserAccount {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"source\\",\\"source_data\\"])) { return; }
  }
  throw new Error(\\"Invariance violation! Expected subject to be a RawUserAccount, but it was instead: \\" + JSON.stringify(subject));
}
function isRawUserAccountLike(subject: any): subject is RawUserAccount {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"source\\",\\"source_data\\"])) { return true; }
  }
  return false;
}
"
`;

exports[`interfaces/types spits out types 1`] = `
"function objectHasProperties(obj: Record<string, any>, properties: string[]): boolean {
  for(const property of properties) {
    if(!obj.hasOwnProperty(property)) {
      return false;
    }
  }
  return true;
}
type RawUser = {
id: unknown;
/** Users don't have to provide their name */
name?: string;
data: JSON;
};
function assertIsRawUserLike(subject: any): asserts subject is RawUser {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"data\\"])) { return; }
  }
  throw new Error(\\"Invariance violation! Expected subject to be a RawUser, but it was instead: \\" + JSON.stringify(subject));
}
function isRawUserLike(subject: any): subject is RawUser {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"data\\"])) { return true; }
  }
  return false;
}

/** Singular users can have multiple accounts */
type RawUserAccount = {
id: unknown;
/** Who sent us this users' data? */
source: string;
/** The raw data sent from the source provider */
source_data: JSON;
};
function assertIsRawUserAccountLike(subject: any): asserts subject is RawUserAccount {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"source\\",\\"source_data\\"])) { return; }
  }
  throw new Error(\\"Invariance violation! Expected subject to be a RawUserAccount, but it was instead: \\" + JSON.stringify(subject));
}
function isRawUserAccountLike(subject: any): subject is RawUserAccount {
  if(typeof subject === \\"object\\") {
    if(objectHasProperties(subject, [\\"id\\",\\"source\\",\\"source_data\\"])) { return true; }
  }
  return false;
}
"
`;
