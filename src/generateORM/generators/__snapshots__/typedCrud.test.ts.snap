// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates some code: MySQL flavored 1`] = `
Object {
  "code": "/**
 * Insert a single User into the database, returning the inserted ID
 */
export async function insertUser(
  input: UserInput,
  connection: ConnectionOrTransaction
): Promise<string> {
  const rawInput = userToRawUser(input);
  const result = await RawUsers(connection).insert(rawInput);
  return rawUserToUser(result[0]);
}

/**
 * Inserts one ore more Users into the database, returning the inserted IDs
 */
export async function insertUsers(
  input: UserInput[],
  connection: ConnectionOrTransaction
): Promise<string[]> {
  const rawInput = input.map((input) => userToRawUser(input));
  const results = await RawUsers(connection).insert(rawInput);
  return results.map((rawEntity) => rawUserToUser(rawEntity));
}
/** Find many Users in the database by a constraint function */
export async function findUsers(
  query: (
    query: Knex.QueryBuilder<RawUser, RawUser[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<User[]> {
  const queryBuilder = RawUsers(connection);
  await query(queryBuilder);
  const results = await queryBuilder;
  return results.map((rawEntity) => rawUserToUser(rawEntity));
}

/** Find a User in the database or fail */
export async function findUserOrFail(
  query: (
    query: Knex.QueryBuilder<RawUser, RawUser[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<User> {
  const queryBuilder = RawUsers(connection);
  await query(queryBuilder);
  queryBuilder.limit(1);
  const results = await queryBuilder;
  if (results.length === 0) {
    throw new Error(
      \\"Error! Unable to find User in findUserOrFail call\\"
    );
  }
  return rawUserToUser(results[0]);
}
/** Update a single User */
export async function updateUser(
  entity: UserInput,
  connection: ConnectionOrTransaction
): Promise<void> {
  const { id, ...rawInput } =
    userToRawUser(entity);
  await RawUsers(connection)
    .update(rawInput)
    .where(\\"id\\", \\"=\\", entity.id)
    .limit(1);
}

/** Update one or more Users under specific conditions */
export async function updateUserWhere(
  updatePayload: Partial<UserInput>,
  query: (query: Knex.QueryBuilder<RawUser, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<void> {
  const rawUpdatePayload = userToRawUser(updatePayload);
  const queryBuilder =
    RawUsers(connection).update(rawUpdatePayload);
  await query(queryBuilder);
  await queryBuilder;
}
/** Deletes a User */
export async function deleteUser(
  entity: User,
  connection: ConnectionOrTransaction
): Promise<number> {
  return RawUsers<number>(connection)
    .where(\\"id\\", \\"=\\", entity.id)
    .delete()
    .limit(1);
}

/** Delete one or more Users under specific conditions */
export async function deleteUserWhere(
  query: (query: Knex.QueryBuilder<RawUser, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<number> {
  const queryBuilder = RawUsers<number>(connection);
  await query(queryBuilder);
  queryBuilder.delete();
  return queryBuilder;
}
/**
 * Insert a single UserAccount into the database, returning the inserted ID
 */
export async function insertUserAccount(
  input: UserAccountInput,
  connection: ConnectionOrTransaction
): Promise<string> {
  const rawInput = userAccountToRawUserAccount(input);
  const result = await RawUserAccounts(connection).insert(rawInput);
  return rawUserAccountToUserAccount(result[0]);
}

/**
 * Inserts one ore more UserAccounts into the database, returning the inserted IDs
 */
export async function insertUserAccounts(
  input: UserAccountInput[],
  connection: ConnectionOrTransaction
): Promise<string[]> {
  const rawInput = input.map((input) => userAccountToRawUserAccount(input));
  const results = await RawUserAccounts(connection).insert(rawInput);
  return results.map((rawEntity) => rawUserAccountToUserAccount(rawEntity));
}
/** Find many UserAccounts in the database by a constraint function */
export async function findUserAccounts(
  query: (
    query: Knex.QueryBuilder<RawUserAccount, RawUserAccount[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<UserAccount[]> {
  const queryBuilder = RawUserAccounts(connection);
  await query(queryBuilder);
  const results = await queryBuilder;
  return results.map((rawEntity) => rawUserAccountToUserAccount(rawEntity));
}

/** Find a UserAccount in the database or fail */
export async function findUserAccountOrFail(
  query: (
    query: Knex.QueryBuilder<RawUserAccount, RawUserAccount[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<UserAccount> {
  const queryBuilder = RawUserAccounts(connection);
  await query(queryBuilder);
  queryBuilder.limit(1);
  const results = await queryBuilder;
  if (results.length === 0) {
    throw new Error(
      \\"Error! Unable to find UserAccount in findUserAccountOrFail call\\"
    );
  }
  return rawUserAccountToUserAccount(results[0]);
}
/** Update a single UserAccount */
export async function updateUserAccount(
  entity: UserAccountInput,
  connection: ConnectionOrTransaction
): Promise<void> {
  const { id, ...rawInput } =
    userAccountToRawUserAccount(entity);
  await RawUserAccounts(connection)
    .update(rawInput)
    .where(\\"id\\", \\"=\\", entity.id)
    .limit(1);
}

/** Update one or more UserAccounts under specific conditions */
export async function updateUserAccountWhere(
  updatePayload: Partial<UserAccountInput>,
  query: (query: Knex.QueryBuilder<RawUserAccount, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<void> {
  const rawUpdatePayload = userAccountToRawUserAccount(updatePayload);
  const queryBuilder =
    RawUserAccounts(connection).update(rawUpdatePayload);
  await query(queryBuilder);
  await queryBuilder;
}
/** Deletes a UserAccount */
export async function deleteUserAccount(
  entity: UserAccount,
  connection: ConnectionOrTransaction
): Promise<number> {
  return RawUserAccounts<number>(connection)
    .where(\\"id\\", \\"=\\", entity.id)
    .delete()
    .limit(1);
}

/** Delete one or more UserAccounts under specific conditions */
export async function deleteUserAccountWhere(
  query: (query: Knex.QueryBuilder<RawUserAccount, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<number> {
  const queryBuilder = RawUserAccounts<number>(connection);
  await query(queryBuilder);
  queryBuilder.delete();
  return queryBuilder;
}
",
  "testCode": "",
}
`;

exports[`generates some code: PG flavored 1`] = `
Object {
  "code": "/**
 * Insert a single User into the database, returning the inserted entity
 */
export async function insertUser(
  input: UserInput,
  connection: ConnectionOrTransaction
): Promise<User> {
  const rawInput = userToRawUser(input);
  const result = await RawUsers(connection)
    .insert(rawInput)
    .returning(\\"*\\");
  return rawUserToUser(result[0]);
}

/**
 * Inserts one ore more Users into the database, returning the inserted entities
 */
export async function insertUsers(
  input: UserInput[],
  connection: ConnectionOrTransaction
): Promise<User[]> {
  const rawInput = input.map((input) => userToRawUser(input));
  const results = await RawUsers(connection)
    .insert(rawInput)
    .returning(\\"*\\");
  return results.map((rawEntity) => rawUserToUser(rawEntity));
}
/** Find many Users in the database by a constraint function */
export async function findUsers(
  query: (
    query: Knex.QueryBuilder<RawUser, RawUser[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<User[]> {
  const queryBuilder = RawUsers(connection);
  await query(queryBuilder);
  const results = await queryBuilder;
  return results.map((rawEntity) => rawUserToUser(rawEntity));
}

/** Find a User in the database or fail */
export async function findUserOrFail(
  query: (
    query: Knex.QueryBuilder<RawUser, RawUser[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<User> {
  const queryBuilder = RawUsers(connection);
  await query(queryBuilder);
  queryBuilder.limit(1);
  const results = await queryBuilder;
  if (results.length === 0) {
    throw new Error(
      \\"Error! Unable to find User in findUserOrFail call\\"
    );
  }
  return rawUserToUser(results[0]);
}
/** Update a single User */
export async function updateUser(
  entity: UserInput,
  connection: ConnectionOrTransaction
): Promise<void> {
  const { id, ...rawInput } =
    userToRawUser(entity);
  await RawUsers(connection)
    .update(rawInput)
    .where(\\"id\\", \\"=\\", entity.id)
    .limit(1);
}

/** Update one or more Users under specific conditions */
export async function updateUserWhere(
  updatePayload: Partial<UserInput>,
  query: (query: Knex.QueryBuilder<RawUser, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<void> {
  const rawUpdatePayload = userToRawUser(updatePayload);
  const queryBuilder =
    RawUsers(connection).update(rawUpdatePayload);
  await query(queryBuilder);
  await queryBuilder;
}
/** Deletes a User */
export async function deleteUser(
  entity: User,
  connection: ConnectionOrTransaction
): Promise<number> {
  return RawUsers<number>(connection)
    .where(\\"id\\", \\"=\\", entity.id)
    .delete()
    .limit(1);
}

/** Delete one or more Users under specific conditions */
export async function deleteUserWhere(
  query: (query: Knex.QueryBuilder<RawUser, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<number> {
  const queryBuilder = RawUsers<number>(connection);
  await query(queryBuilder);
  queryBuilder.delete();
  return queryBuilder;
}
/**
 * Insert a single UserAccount into the database, returning the inserted entity
 */
export async function insertUserAccount(
  input: UserAccountInput,
  connection: ConnectionOrTransaction
): Promise<UserAccount> {
  const rawInput = userAccountToRawUserAccount(input);
  const result = await RawUserAccounts(connection)
    .insert(rawInput)
    .returning(\\"*\\");
  return rawUserAccountToUserAccount(result[0]);
}

/**
 * Inserts one ore more UserAccounts into the database, returning the inserted entities
 */
export async function insertUserAccounts(
  input: UserAccountInput[],
  connection: ConnectionOrTransaction
): Promise<UserAccount[]> {
  const rawInput = input.map((input) => userAccountToRawUserAccount(input));
  const results = await RawUserAccounts(connection)
    .insert(rawInput)
    .returning(\\"*\\");
  return results.map((rawEntity) => rawUserAccountToUserAccount(rawEntity));
}
/** Find many UserAccounts in the database by a constraint function */
export async function findUserAccounts(
  query: (
    query: Knex.QueryBuilder<RawUserAccount, RawUserAccount[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<UserAccount[]> {
  const queryBuilder = RawUserAccounts(connection);
  await query(queryBuilder);
  const results = await queryBuilder;
  return results.map((rawEntity) => rawUserAccountToUserAccount(rawEntity));
}

/** Find a UserAccount in the database or fail */
export async function findUserAccountOrFail(
  query: (
    query: Knex.QueryBuilder<RawUserAccount, RawUserAccount[]>
  ) => unknown,
  connection: ConnectionOrTransaction
): Promise<UserAccount> {
  const queryBuilder = RawUserAccounts(connection);
  await query(queryBuilder);
  queryBuilder.limit(1);
  const results = await queryBuilder;
  if (results.length === 0) {
    throw new Error(
      \\"Error! Unable to find UserAccount in findUserAccountOrFail call\\"
    );
  }
  return rawUserAccountToUserAccount(results[0]);
}
/** Update a single UserAccount */
export async function updateUserAccount(
  entity: UserAccountInput,
  connection: ConnectionOrTransaction
): Promise<void> {
  const { id, ...rawInput } =
    userAccountToRawUserAccount(entity);
  await RawUserAccounts(connection)
    .update(rawInput)
    .where(\\"id\\", \\"=\\", entity.id)
    .limit(1);
}

/** Update one or more UserAccounts under specific conditions */
export async function updateUserAccountWhere(
  updatePayload: Partial<UserAccountInput>,
  query: (query: Knex.QueryBuilder<RawUserAccount, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<void> {
  const rawUpdatePayload = userAccountToRawUserAccount(updatePayload);
  const queryBuilder =
    RawUserAccounts(connection).update(rawUpdatePayload);
  await query(queryBuilder);
  await queryBuilder;
}
/** Deletes a UserAccount */
export async function deleteUserAccount(
  entity: UserAccount,
  connection: ConnectionOrTransaction
): Promise<number> {
  return RawUserAccounts<number>(connection)
    .where(\\"id\\", \\"=\\", entity.id)
    .delete()
    .limit(1);
}

/** Delete one or more UserAccounts under specific conditions */
export async function deleteUserAccountWhere(
  query: (query: Knex.QueryBuilder<RawUserAccount, number>) => unknown,
  connection: ConnectionOrTransaction
): Promise<number> {
  const queryBuilder = RawUserAccounts<number>(connection);
  await query(queryBuilder);
  queryBuilder.delete();
  return queryBuilder;
}
",
  "testCode": "",
}
`;
