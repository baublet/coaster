import mkdirp from "mkdirp";
import path from "path";

import { CoasterError, isCoasterError, perform } from "@baublet/coaster-utils";
import { writeFile } from "@baublet/coaster-fs";

import { ModuleMetadata } from "../manifest/types";
import { CreateReactUiOptions } from "./types";
import { BuildTools } from "../build/types";
import { getNormalizedFileDescriptorFromFileInput } from "../common/getNormalizedFileDescriptorFromFileInput";
import { resolveInputPathFromFile } from "../common/resolveInputPathFromFile";

export async function maybeBuildRoutesComponent({
  metadata,
  uiOptions,
}: {
  uiOptions: CreateReactUiOptions;
  metadata: ModuleMetadata;
  buildFolder: string;
  buildTools: BuildTools;
}): Promise<CoasterError | undefined> {
  const { routes } = uiOptions;
  if (!routes) {
    return;
  }

  const code = getCode({
    metadata,
    routes,
  });

  if (isCoasterError(code)) {
    return code;
  }

  const buildLocation = uiOptions.routesComponentPath
    ? resolveInputPathFromFile(uiOptions.routesComponentPath, metadata.filePath)
    : resolveInputPathFromFile("Routes.generated.tsx", metadata.filePath);

  await writeFile(buildLocation, code);
}

function getCode({
  routes,
  metadata,
}: {
  routes: Record<string, string>;
  metadata: ModuleMetadata;
}): string | CoasterError {
  const codeLines: string[] = [];
  // prettier-ignore
  codeLines.push(`// automatically generated by Coaster: ${new Date().toISOString()}`);
  codeLines.push(`import React from "react";`);
  codeLines.push(`import { BrowserRouter, Route } from "react-router-dom";`);
  // prettier-ignore
  codeLines.push(`import { AsyncComponent, route } from "@baublet/coaster/react-components";`);
  codeLines.push(`export function Routes() {`);
  codeLines.push(`  return (`);
  codeLines.push(`    <BrowserRouter>`);

  for (const [route, importString] of Object.entries(routes)) {
    const exportNameIfNotSpecified = path.basename(importString, ".tsx");
    const fileDescriptor = getNormalizedFileDescriptorFromFileInput({
      fileInput: importString,
      exportNameIfNotSpecified,
      referenceFileFullPath: metadata.filePath,
    });

    if (isCoasterError(fileDescriptor)) {
      return fileDescriptor;
    }

    codeLines.push(`        <Route`);
    codeLines.push(`          path={${JSON.stringify(route)}}`);
    codeLines.push(`          render={() => (`);
    codeLines.push(`            <AsyncComponent`);
    // prettier-ignore
    codeLines.push(`              loadFn={() => import(${JSON.stringify(fileDescriptor.file)})}`);
    // prettier-ignore
    codeLines.push(`              exportName={${JSON.stringify(fileDescriptor.exportName)}}`);
    codeLines.push(`            />`);
    codeLines.push(`          )}`);
    if (route === "$default") {
      codeLines.push(`          exact`);
    }
    codeLines.push(`        />`);
  }

  codeLines.push(`    </BrowserRouter>`);
  codeLines.push(`  )`);
  codeLines.push(`}\n`);

  return codeLines.join("\n");
}
